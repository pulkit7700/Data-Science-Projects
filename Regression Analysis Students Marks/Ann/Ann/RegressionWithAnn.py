# -*- coding: utf-8 -*-
"""Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p5H-IVWya2EVKbU_EPQo5ZKawGuE5YJO
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns

df = pd.read_csv("student_mat.csv")
df

df["school"].value_counts()

sns.countplot(df["school"], palette="coolwarm", hue="sex", data=df)

df["address"].value_counts()

sns.countplot(df["address"], palette="coolwarm", hue="sex", data=df)

df["famsize"].value_counts()

sns.countplot(df["famsize"], palette="coolwarm", hue="sex", data=df)

df["Pstatus"].value_counts()

sns.countplot(df["Pstatus"], palette="coolwarm", hue="sex", data=df)

df["Mjob"].value_counts()

sns.countplot(df["Mjob"], palette="coolwarm", hue="sex", data=df)

df["Fjob"].value_counts()

sns.countplot(df["Fjob"], palette="coolwarm", hue="sex", data=df)

df["reason"].value_counts()

sns.countplot(df["reason"], palette="coolwarm", hue="sex", data=df)

df["guardian"].value_counts()

sns.countplot(df["guardian"], palette="coolwarm", hue="sex", data=df)

df["schoolsup"].value_counts()

sns.countplot(df["schoolsup"], palette="coolwarm", hue="sex", data=df)

sns.countplot(df["famsup"], palette="coolwarm", hue="sex", data=df)

sns.countplot(df["paid"], palette="coolwarm", hue="sex", data=df)

sns.countplot(df["activities"], palette="coolwarm", hue="sex", data=df)

sns.countplot(df["nursery"], palette="coolwarm", hue="sex", data=df)

sns.countplot(df["higher"], palette="coolwarm", hue="sex", data=df)

sns.countplot(df["internet"], palette="coolwarm", hue="sex", data=df)

sns.countplot(df["romantic"], palette="coolwarm", hue="sex", data=df)

X = df.drop(['G1', 'G2', 'G3'], axis=1)

X

y = df["G1"]

y

from sklearn.base import BaseEstimator, TransformerMixin

class DataFrameSelector(BaseEstimator, TransformerMixin):
    def __init__(self, attribute_names):
        self.attribute_names = attribute_names
    def fit(self, X, y=None):
        return self
    def transform(self, X):
        return X[self.attribute_names]

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder
cat_pipeline = Pipeline([
        ("select_cat", DataFrameSelector(['school', 'sex', 'address', 'famsize', 'Pstatus', 'Mjob', 'Fjob', 'reason', 'guardian', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic'])),
        ("cat_encoder", OneHotEncoder(sparse=False)),
    ])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

X_train = cat_pipeline.fit_transform(X_train)

X_train

X_test = cat_pipeline.fit_transform(X_test)

X_test

"""# Building the Ann"""

import tensorflow as tf

ann = tf.keras.Sequential()

"""Adding layers

"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

ann.add(tf.keras.layers.Dense(units=1))

"""Compiling the trainer """

ann.compile(optimizer = 'adam', loss = 'mean_squared_error')

"""Trining the data set 

"""

ann.fit(X_train, y_train, batch_size = 32, epochs = 100)

y_pred = ann.predict(X_test)

y_pred

y_pred = np.array(y_pred)
y_test = np.array(y_test)

checks = np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1)

checks_columns = pd.DataFrame(checks, columns=["predicted", "Actual"])

checks_columns

test_data = pd.read_csv("student_por.csv")
test_data

A_test = test_data.drop(["G1", "G2", "G3"], axis=1)

A_test = cat_pipeline.fit_transform(A_test)

A_pred = ann.predict(A_test)

A_pred

results = test_data["G1"]

results = np.array(results )

A_pred= np.array(A_pred)

combined = np.concatenate((A_pred.reshape(len(A_pred),1), results.reshape(len(results),1)),1)

CombinedView = pd.DataFrame(combined, columns=["Predicted", 'Actual'])

CombinedView